I";ƒ<p>If you work in an office, you are probably told to always lock your computer before you go AFK as a measure of security. In my case, my colleagues will not hesitate to prank whoever forgets his screen unlocked as a punishment.
I am a very caring person, so things like these should not happen to me. I must find a way to lock my screen from a distance and preferably via my smartphone.<br />
To do that, we are going to use python to build our own Telegram bot to control our Windows PC.
<a href="https://github.com/python-telegram-bot/python-telegram-bot">python-telegram-bot</a> is an awesome interface for the Telegram Bot API that enables us to do so much cool stuff using <code class="language-plaintext highlighter-rouge">telegram.ext</code> submodule.</p>

<h3 id="final-product"><a href="#header-3"></a>Final product</h3>

<p>The final result looks like the image below: the <code class="language-plaintext highlighter-rouge">/start</code> command pops up the several buttons that you can tap to perform several tasks such as checking the screen status and locking it. At first, that was the main purpose of the bot, but well.. things escalated quickly.
This bot is also capable of taking screenshots, paste the clipboard, list and kill running processes, navigate file system as well execute shell commands.</p>

<p align="center">
  <img src="../assets/telegram-final-product.png" style="height:600px;" />
</p>

<h3 id="step-1-get-the-api-token"><a href="#header-3"></a>Step 1: Get the API token</h3>

<p>The first step is to create a bot using BotFather of telegram. This is necessary to get the access token and chat id that we will use later.
The process is pretty simple: search for BotFather and run the following commands: <code class="language-plaintext highlighter-rouge">/start</code> , <code class="language-plaintext highlighter-rouge">/newbot</code> choose a name for your bot and finally you will get the required token. Note that the chat id and the token are separated by <code class="language-plaintext highlighter-rouge">:</code> .</p>

<p align="center">
  <img src="../assets/telegram-access-token.jpg" style="height:400px;" />
</p>

<h3 id="step2-get-coding"><a href="#header-3"></a>Step2: Get coding</h3>

<p>Now we get to the fun part. First, we need to import all the necessary libraries</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">telegram.ext</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">telegram</span> <span class="kn">import</span> <span class="n">KeyboardButton</span><span class="p">,</span> <span class="n">ReplyKeyboardMarkup</span>
<span class="kn">from</span> <span class="nn">mss</span> <span class="kn">import</span> <span class="n">mss</span> <span class="c1"># To to capture screenshots
</span><span class="kn">import</span> <span class="nn">tempfile</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">psutil</span> <span class="c1"># To list and kill running processes
</span><span class="kn">import</span> <span class="nn">ctypes</span> <span class="c1"># To lock the screen
</span><span class="kn">import</span> <span class="nn">webbrowser</span> <span class="c1"># To to open URLs in the webbrowser of the computer from the phone
</span><span class="kn">import</span> <span class="nn">pyperclip</span> <span class="c1"># To access the clipboard
</span><span class="kn">import</span> <span class="nn">subprocess</span> <span class="c1"># To execute shell commands
</span><span class="kn">import</span> <span class="nn">json</span>
</code></pre></div></div>

<p>Now letâ€™s define our telegram bot class. Of course, this can be done without using a class, but I like to keep things organized. I stored the chat id and the access token in <code class="language-plaintext highlighter-rouge">auth.json</code> file so I can access it in the <code class="language-plaintext highlighter-rouge">__init__</code> method.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">telegramBOT</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'auth.json'</span><span class="p">)</span>
        <span class="n">auth</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">TOKEN</span> <span class="o">=</span> <span class="n">auth</span><span class="p">[</span><span class="s">"TOKEN"</span><span class="p">]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">CHAT_ID</span> <span class="o">=</span> <span class="n">auth</span><span class="p">[</span><span class="s">"CHAT_ID"</span><span class="p">]</span>
</code></pre></div></div>

<p>Next we define start_command() method that will handle /start command typed by the user in the mobile app. A menu appears containing multiple buttons to command the bot.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">start_command</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">update</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
        <span class="n">buttons</span> <span class="o">=</span> <span class="p">[[</span><span class="n">KeyboardButton</span><span class="p">(</span><span class="s">"âš  Screen status"</span><span class="p">)],</span> <span class="p">[</span><span class="n">KeyboardButton</span><span class="p">(</span><span class="s">"ðŸ”’ Lock screen"</span><span class="p">)],</span> <span class="p">[</span><span class="n">KeyboardButton</span><span class="p">(</span><span class="s">"ðŸ“¸ Take screenshot"</span><span class="p">)],</span>
                   <span class="p">[</span><span class="n">KeyboardButton</span><span class="p">(</span><span class="s">"âœ‚ Paste clipboard"</span><span class="p">)],</span> <span class="p">[</span><span class="n">KeyboardButton</span><span class="p">(</span>
                       <span class="s">"ðŸ“„ List process"</span><span class="p">)],</span> <span class="p">[</span><span class="n">KeyboardButton</span><span class="p">(</span><span class="s">"ðŸ’¤ Sleep"</span><span class="p">)],</span>
                   <span class="p">[</span><span class="n">KeyboardButton</span><span class="p">(</span><span class="s">"ðŸ’¡ More commands"</span><span class="p">)]]</span>
        <span class="n">context</span><span class="p">.</span><span class="n">bot</span><span class="p">.</span><span class="n">send_message</span><span class="p">(</span>
            <span class="n">chat_id</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">CHAT_ID</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s">"I will do what you command."</span><span class="p">,</span> <span class="n">reply_markup</span><span class="o">=</span><span class="n">ReplyKeyboardMarkup</span><span class="p">(</span><span class="n">buttons</span><span class="p">))</span>
</code></pre></div></div>

<p>We implement now handle_message() method. When the user taps a button or type a command, this method will handle it and execute the appropriate task.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">handle_message</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">update</span><span class="p">,</span> <span class="n">input_text</span><span class="p">):</span>

        <span class="n">usr_msg</span> <span class="o">=</span> <span class="n">input_text</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">input_text</span> <span class="o">==</span> <span class="s">'screen status'</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">proc</span> <span class="ow">in</span> <span class="n">psutil</span><span class="p">.</span><span class="n">process_iter</span><span class="p">():</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">name</span><span class="p">()</span> <span class="o">==</span> <span class="s">"LogonUI.exe"</span><span class="p">):</span>
                    <span class="k">return</span> <span class="s">'Screen is Locked'</span>
            <span class="k">return</span> <span class="s">'Screen is Unlocked'</span>

        <span class="k">if</span> <span class="n">input_text</span> <span class="o">==</span> <span class="s">'lock screen'</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">ctypes</span><span class="p">.</span><span class="n">windll</span><span class="p">.</span><span class="n">user32</span><span class="p">.</span><span class="n">LockWorkStation</span><span class="p">()</span>
                <span class="k">return</span> <span class="s">"Screen locked successfully"</span>
            <span class="k">except</span><span class="p">:</span>
                <span class="k">return</span> <span class="s">"Error while locking screen"</span>
</code></pre></div></div>

<p>We can check the status of the screen by searching for the <code class="language-plaintext highlighter-rouge">logonUI.exe</code> in the running processes. If it exists, then the screen is locked. <code class="language-plaintext highlighter-rouge">ctypes</code> enable us to lock the screen without any problem.</p>

<p>I think taking screenshots is a useful feature to have. Here we define <code class="language-plaintext highlighter-rouge">take_screenshot()</code> method to handle this task.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">input_text</span> <span class="o">==</span> <span class="s">"take screenshot"</span><span class="p">:</span>
            <span class="n">update</span><span class="p">.</span><span class="n">message</span><span class="p">.</span><span class="n">bot</span><span class="p">.</span><span class="n">send_photo</span><span class="p">(</span>
                <span class="n">chat_id</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">CHAT_ID</span><span class="p">,</span> <span class="n">photo</span><span class="o">=</span><span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">take_screenshot</span><span class="p">(),</span> <span class="s">'rb'</span><span class="p">))</span>
            <span class="k">return</span> <span class="bp">None</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">take_screenshot</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">TEMPDIR</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">.</span><span class="n">gettempdir</span><span class="p">()</span>
        <span class="n">os</span><span class="p">.</span><span class="n">chdir</span><span class="p">(</span><span class="n">TEMPDIR</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">mss</span><span class="p">()</span> <span class="k">as</span> <span class="n">sct</span><span class="p">:</span>
            <span class="n">sct</span><span class="p">.</span><span class="n">shot</span><span class="p">(</span><span class="n">mon</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">TEMPDIR</span><span class="p">,</span> <span class="s">'monitor-0.png'</span><span class="p">)</span>
</code></pre></div></div>

<p>Getting the clipboard content is pretty straightforward with the <code class="language-plaintext highlighter-rouge">pyperclip</code> module.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">input_text</span> <span class="o">==</span> <span class="s">"paste clipboard"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">pyperclip</span><span class="p">.</span><span class="n">paste</span><span class="p">()</span>
</code></pre></div></div>

<p>Here we handle the part of process listing and killing. To kill a process a user must manually type the keyword <code class="language-plaintext highlighter-rouge">kill</code> proceeded by the name of the process (capitalization matters).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">input_text</span> <span class="o">==</span> <span class="s">"list process"</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">proc_list</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="k">for</span> <span class="n">proc</span> <span class="ow">in</span> <span class="n">psutil</span><span class="p">.</span><span class="n">process_iter</span><span class="p">():</span>
                    <span class="k">if</span> <span class="n">proc</span><span class="p">.</span><span class="n">name</span><span class="p">()</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">proc_list</span><span class="p">:</span>
                        <span class="n">proc_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">name</span><span class="p">())</span>
                <span class="n">processes</span> <span class="o">=</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">proc_list</span><span class="p">)</span>
            <span class="k">except</span> <span class="p">(</span><span class="n">psutil</span><span class="p">.</span><span class="n">NoSuchProcess</span><span class="p">,</span> <span class="n">psutil</span><span class="p">.</span><span class="n">AccessDenied</span><span class="p">,</span> <span class="n">psutil</span><span class="p">.</span><span class="n">ZombieProcess</span><span class="p">):</span>
                <span class="k">pass</span>
            <span class="k">return</span> <span class="n">processes</span>

        <span class="k">if</span> <span class="n">usr_msg</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">'kill'</span><span class="p">:</span>
            <span class="n">proc_list</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">proc</span> <span class="ow">in</span> <span class="n">psutil</span><span class="p">.</span><span class="n">process_iter</span><span class="p">():</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">proc_list</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">proc</span><span class="p">.</span><span class="n">name</span><span class="p">(),</span> <span class="nb">str</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">pid</span><span class="p">)])</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">proc_list</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">usr_msg</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
                        <span class="n">psutil</span><span class="p">.</span><span class="n">Process</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">])).</span><span class="n">terminate</span><span class="p">()</span>
                <span class="k">return</span> <span class="s">'Process terminated successfully'</span>
            <span class="k">except</span><span class="p">:</span>
                <span class="k">return</span> <span class="s">'Error occured while killing the process'</span>
</code></pre></div></div>

<p>We can also open URLs using the command <code class="language-plaintext highlighter-rouge">url</code> proceeded by the URL, navigate the file system using <code class="language-plaintext highlighter-rouge">cd &lt;path&gt;</code> and download files from our computer with <code class="language-plaintext highlighter-rouge">download &lt;name_of_the_file&gt;</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">if</span> <span class="n">usr_msg</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">'url'</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">webbrowser</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="n">usr_msg</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">return</span> <span class="s">'Link opened successfully'</span>
            <span class="k">except</span><span class="p">:</span>
                <span class="k">return</span> <span class="s">'Error occured while opening link'</span>

        <span class="k">if</span> <span class="n">usr_msg</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">"cd"</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">usr_msg</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">os</span><span class="p">.</span><span class="n">chdir</span><span class="p">(</span><span class="n">usr_msg</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">except</span><span class="p">:</span>
                    <span class="k">return</span> <span class="s">"Directory not found !"</span>
                <span class="n">res</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getcwd</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">res</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">res</span>

        <span class="k">if</span> <span class="n">usr_msg</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">"download"</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">usr_msg</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="n">usr_msg</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">document</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">usr_msg</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">'rb'</span><span class="p">)</span>
                        <span class="n">update</span><span class="p">.</span><span class="n">message</span><span class="p">.</span><span class="n">bot</span><span class="p">.</span><span class="n">send_document</span><span class="p">(</span>
                            <span class="bp">self</span><span class="p">.</span><span class="n">CHAT_ID</span><span class="p">,</span> <span class="n">document</span><span class="p">)</span>
                    <span class="k">except</span><span class="p">:</span>
                        <span class="k">return</span> <span class="s">"Something went wrong !"</span>
</code></pre></div></div>

<p>The subprocess module enables us to run shell commands on our computer. We just need to type <code class="language-plaintext highlighter-rouge">cmd</code> followed by the command we want to execute and the its output will be received.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">usr_msg</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">"cmd"</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">Popen</span><span class="p">(</span>
                <span class="n">usr_msg</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stdin</span><span class="o">=</span><span class="n">subprocess</span><span class="p">.</span><span class="n">DEVNULL</span><span class="p">)</span>
            <span class="n">stdout</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">decode</span><span class="p">(</span><span class="s">"utf-8"</span><span class="p">,</span> <span class="s">'ignore'</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
            <span class="n">stderr</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">stderr</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">decode</span><span class="p">(</span><span class="s">"utf-8"</span><span class="p">,</span> <span class="s">'ignore'</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">stdout</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">(</span><span class="n">stdout</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">stderr</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">(</span><span class="n">stderr</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="s">''</span>
</code></pre></div></div>

<p>We can put the computer to sleep, but we will lose our control on it.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">input_text</span> <span class="o">==</span> <span class="s">"sleep"</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"rundll32.exe powrprof.dll,SetSuspendState 0,1,0"</span><span class="p">)</span>
                <span class="k">return</span> <span class="s">"Windows was put to sleep"</span>
            <span class="k">except</span><span class="p">:</span>
                <span class="k">return</span> <span class="s">"Cannot put Windows to sleep"</span>
</code></pre></div></div>

<p>We define the <code class="language-plaintext highlighter-rouge">send_response()</code> method to further process the data sent to the user. The limit of characters we can send with send_message method is 4096 characters, so we need to split larger amount of data into chunks and send them separately.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">send_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">update</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
        <span class="n">user_message</span> <span class="o">=</span> <span class="n">update</span><span class="p">.</span><span class="n">message</span><span class="p">.</span><span class="n">text</span>
        <span class="n">user_message</span> <span class="o">=</span> <span class="n">user_message</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span>
            <span class="s">'ascii'</span><span class="p">,</span> <span class="s">'ignore'</span><span class="p">).</span><span class="n">decode</span><span class="p">(</span><span class="s">'ascii'</span><span class="p">).</span><span class="n">strip</span><span class="p">(</span><span class="s">' '</span><span class="p">)</span>
        <span class="n">user_message</span> <span class="o">=</span> <span class="n">user_message</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">lower</span><span class="p">()</span> <span class="o">+</span> <span class="n">user_message</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
        <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">handle_message</span><span class="p">(</span><span class="n">update</span><span class="p">,</span> <span class="n">user_message</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">response</span><span class="p">:</span>
            <span class="k">if</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">4096</span><span class="p">):</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="p">),</span> <span class="mi">4096</span><span class="p">):</span>
                    <span class="n">context</span><span class="p">.</span><span class="n">bot</span><span class="p">.</span><span class="n">send_message</span><span class="p">(</span>
                        <span class="n">chat_id</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">CHAT_ID</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">response</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="mi">4096</span><span class="o">+</span><span class="n">i</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">context</span><span class="p">.</span><span class="n">bot</span><span class="p">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">chat_id</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">CHAT_ID</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">response</span><span class="p">)</span>
</code></pre></div></div>

<p>It is always nice to have readable error when something goes wrong.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">error</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">update</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Update </span><span class="si">{</span><span class="n">update</span><span class="si">}</span><span class="s"> caused error </span><span class="si">{</span><span class="n">context</span><span class="p">.</span><span class="n">error</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>And finally the main method <code class="language-plaintext highlighter-rouge">start_bot()</code> where we add our handlers and start our bot.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">start_bot</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">updater</span> <span class="o">=</span> <span class="n">Updater</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">TOKEN</span><span class="p">,</span> <span class="n">use_context</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="n">updater</span><span class="p">.</span><span class="n">dispatcher</span>
        <span class="n">dp</span><span class="p">.</span><span class="n">add_handler</span><span class="p">(</span><span class="n">CommandHandler</span><span class="p">(</span><span class="s">"start"</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">start_command</span><span class="p">))</span>
        <span class="n">dp</span><span class="p">.</span><span class="n">add_handler</span><span class="p">(</span><span class="n">MessageHandler</span><span class="p">(</span><span class="n">Filters</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">send_response</span><span class="p">))</span>
        <span class="n">dp</span><span class="p">.</span><span class="n">add_error_handler</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">error</span><span class="p">)</span>
        <span class="n">updater</span><span class="p">.</span><span class="n">start_polling</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"[+] BOT has started"</span><span class="p">)</span>
        <span class="n">updater</span><span class="p">.</span><span class="n">idle</span><span class="p">()</span>
</code></pre></div></div>

<p>To start the bot we instantiate the TelegramBot class and call the <code class="language-plaintext highlighter-rouge">start_bot()</code> method.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bot</span> <span class="o">=</span> <span class="n">TelegramBot</span><span class="p">()</span>
<span class="n">bot</span><span class="p">.</span><span class="n">start_bot</span><span class="p">()</span>
</code></pre></div></div>

<p>The entire code is available on github <a href="https://github.com/Ahmed-Z/Telegram-Remote-Desktop">here</a>.</p>

<h3 id="final-step"><a href="#header-3"></a>Final step</h3>

<p>Once you run this python script on the computer you want to control, you need to search for the bot in the telegram app by the name you defined in the first step.
You can always add more features to this bot. Remember, you are only limited by your imagination (and your coding skills lol). <br /> python-telgram-bot documentation <a href="https://docs.python-telegram-bot.org/en/stable/telegram.ext.html">here</a>.</p>

<p>HAPPY HACKING.</p>
:ET